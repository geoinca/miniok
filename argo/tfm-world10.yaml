apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: tfm-
spec:
  entrypoint: tfm
  volumes:
  - name: argo-artifacts-vol
    secret:
      secretName: argo-artifacts
  - name: tfm-secret-vol
    secret:
      secretName: tfm-secret
  arguments:
    parameters:
    - name: filename
      value: outfilename.jpg
    - name: s3prefix
      value: "id1/"
    - name: process
      value: "doNotning"                   
  templates:
  - name: tfm
    inputs:
      parameters:
      - name: process
    steps:
    # tfm a coin
    - - name: tfm-coin
        template: tfm-coin
        arguments:
          parameters: [{name: text, value: "{{inputs.parameters.message1}}"}]        
    # evaluate the result in parallel
    - - name: doNothing
        template: doNothing                 # call donothing template if "donothing "
        when: "{{steps.tfm-coin.outputs.result}} == 0"
      - name: faceAlignment
        template: faceAlignment                 # call faceAlignment template if "faceAlignment"
        when: "{{steps.tfm-coin.outputs.result}} == 1"
      - name: warpImages
        template: warpImages                 # call warpImages template if "warpImages"
        when: "{{steps.tfm-coin.outputs.result}} == 2"        
      - name: panorama
        template: panorama                 # call PANORAMA template if "PANORAMA"
        when: "{{steps.tfm-coin.outputs.result}} > 2"
    - - name: tfm-finished
        template: tfm-finished # call tfm-finished template

  # Return doNothing, bgr2Gray, warpImages, panorama based on a number of items in the bucket alpine:3.6 geoincaks/pythonimg:0.1.5 python3 00countobj.py
  - name: tfm-coin 
    container:
      image: geoincaks/pythonimg:0.2.1  
      command: [sh, -c]
      args: [ "python3 00countobj.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}' {{tfm-coin.outputs.result}}"  ]
      env:
      - name: MYACCESSKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: accesskey
      - name: MYSECRETKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: secretkey
      - name: MYARGOENDPOINT
        valueFrom:
          secretKeyRef:
            name: tfm-secret
            key: minioendpoint              
      volumeMounts:
      - name: argo-artifacts-vol
        mountPath: "/app/argo-artifacts/mountpath"
      - name: tfm-secret-vol
        mountPath: "/app/tfm-secret/mountpath"   
    outputs:
      parameters:
      - name: task-param
        value: "task-output-parameter"                   
  - name: doNothing
    container:
      image: geoincaks/pythonimg:0.2.1
      command: [sh, -c]
      args: ["python3 00countobj.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}' {{tfm-coin.outputs.result}}" ]      
      env:
      - name: MYACCESSKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: accesskey
      - name: MYSECRETKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: secretkey
      - name: MYARGOENDPOINT
        valueFrom:
          secretKeyRef:
            name: tfm-secret
            key: minioendpoint                   
      - name: MYTOKENKEY
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: tokenkey
      - name: MYSIGNINGSECRET
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: signingSecret                        
      volumeMounts:
      - name: argo-artifacts-vol
        mountPath: "//mountpath"
      - name: tfm-secret-vol
        mountPath: "/tfm-secret/mountpath"  
  - name: faceAlignment
    container:
      image: geoincaks/pythonfacealignment:0.2.0
      command: [sh, -c]
      args: ["python3 01facealignment.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"]
      env:
      - name: MYACCESSKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: accesskey
      - name: MYSECRETKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: secretkey
      - name: MYARGOENDPOINT
        valueFrom:
          secretKeyRef:
            name: tfm-secret
            key: minioendpoint              
      volumeMounts:
      - name: argo-artifacts-vol
        mountPath: "/app/argo-artifacts/mountpath"
      - name: tfm-secret-vol
        mountPath: "/app/tfm-secret/mountpath"
    outputs:
      parameters:
      - name: process-output
        value: "faceAlignment"           
  - name: warpImages
    container:
      image: geoincaks/pythonwarpimg:0.2.0
      command: [sh, -c]
      args: ["python3 02warp2img.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"]
      env:
      - name: MYACCESSKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: accesskey
      - name: MYSECRETKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: secretkey      
      - name: MYTOKENKEY
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: tokenkey
      - name: MYARGOENDPOINT
        valueFrom:
          secretKeyRef:
            name: tfm-secret
            key: minioendpoint          
      - name: MYSIGNINGSECRET
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: signingSecret                        
      volumeMounts:
      - name: argo-artifacts-vol
        mountPath: "/app/argo-artifacts/mountpath"
      - name: tfm-secret-vol
        mountPath: "/app/tfm-secret/mountpath"               
  - name: panorama
    container:
      image: geoincaks/pythonpanorama:0.1.2
      command: [sh, -c]
      args: ["python3 04panoimg.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"] 
      env:
      - name: MYACCESSKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: accesskey
      - name: MYSECRETKEY
        valueFrom:
          secretKeyRef:
            name: argo-artifacts
            key: secretkey      
      - name: MYTOKENKEY
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: tokenkey
      - name: MYARGOENDPOINT
        valueFrom:
          secretKeyRef:
            name: tfm-secret
            key: minioendpoint          
      - name: MYSIGNINGSECRET
        valueFrom:
          secretKeyRef:
            name: tfm-secret 
            key: signingSecret                        
      volumeMounts:
      - name: argo-artifacts-vol
        mountPath: "/app/argo-artifacts/mountpath"
      - name: tfm-secret-vol
        mountPath: "/app/tfm-secret/mountpath"
  - name: tfm-finished
    container: 
      image: geoincaks/ubuntutest:0.1.3
      command: [sh, -c]
      args: ["curl -X POST -H 'Authorization: Bearer xoxb-xxxxxx-xxxxxx-ODSLHFWykFionecTuMbYNfXh' -H 'Content-type: application/json' --data '{\"channel\":\"tfm\",\"text\":\"test linix: {{tfm-coin.outputs.result}}\"}' https://slack.com/api/chat.postMessage"]
    arguments:
      parameters: [{name: text, value: "{{tfm-coin.outputs.result}}"}]  
