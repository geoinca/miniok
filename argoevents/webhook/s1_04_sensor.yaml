apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook4a
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: test-dep
      eventSourceName: webhook
      eventName: example4
  triggers:
    - template:
        name: webhook-workflow-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: tfm-
              spec:
                entrypoint: tfm
                arguments:
                  parameters:
                  - name: filename
                    value: outfilename.jpg
                  - name: s3prefix
                    value: "id1/"                 
                volumes:
                - name: argo-artifacts-vol
                  secret:
                    secretName: argo-artifacts
                - name: tfm-secret-vol
                  secret:
                    secretName: tfm-secret                     
                templates:
                - name: tfm
                  steps:
                  # tfm a coin
                  - - name: tfm-coin
                      template: tfm-coin
                  # evaluate the result in parallel
                  - - name: doNothing
                      template: doNothing                 # call donothing template if "donothing "
                      when: "{{steps.tfm-coin.outputs.result}} == 0"
                    - name: faceAlignment
                      template: faceAlignment                 # call faceAlignment template if "faceAlignment"
                      when: "{{steps.tfm-coin.outputs.result}} == 1"
                    - name: warpImages
                      template: warpImages                 # call warpImages template if "warpImages"
                      when: "{{steps.tfm-coin.outputs.result}} == 2"        
                    - name: panorama
                      template: panorama                 # call PANORAMA template if "PANORAMA"
                      when: "{{steps.tfm-coin.outputs.result}} > 2"        
                # Return doNothing, bgr2Gray, warpImages, panorama based on a number of items in the bucket alpine:3.6 geoincaks/pythonimg:0.1.5 python3 00countobj.py
                - name: tfm-coin
                  container:
                    image: geoincaks/pythonimg:0.1.7  
                    command: [sh, -c]
                    args: [ "python3 00countobj.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'" ]
                    env:
                    - name: MYACCESSKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: accesskey
                    - name: MYSECRETKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: secretkey
                    - name: MYARGOENDPOINT
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret
                          key: minioendpoint              
                    volumeMounts:
                    - name: argo-artifacts-vol
                      mountPath: "/app/argo-artifacts/mountpath"
                    - name: tfm-secret-vol
                      mountPath: "/app/tfm-secret/mountpath"              
                - name: doNothing
                  container:
                    image: geoincaks/pythonimg:0.1.7
                    command: [sh, -c]
                    args: ["python3 00countobj.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"]      
                    env:
                    - name: MYACCESSKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: accesskey
                    - name: MYSECRETKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: secretkey      
                    - name: MYTOKENKEY
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret 
                          key: tokenkey
                    - name: MYSIGNINGSECRET
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret 
                          key: signingSecret                        
                    volumeMounts:
                    - name: argo-artifacts-vol
                      mountPath: "//mountpath"
                    - name: tfm-secret-vol
                      mountPath: "/tfm-secret/mountpath"  
                - name: faceAlignment                
                  container:
                    image: geoincaks/pythonfacealignment:0.1.14
                    command: [sh, -c]
                    args: ["python3 01facealignment.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"]
                    env:
                    - name: MYACCESSKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: accesskey
                    - name: MYSECRETKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: secretkey
                    - name: MYARGOENDPOINT
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret
                          key: minioendpoint              
                    volumeMounts:
                    - name: argo-artifacts-vol
                      mountPath: "/app/argo-artifacts/mountpath"
                    - name: tfm-secret-vol
                      mountPath: "/app/tfm-secret/mountpath"    
                - name: warpImages
                  container:
                    image: geoincaks/pythonwarpimg:0.1.7
                    command: [sh, -c]
                    args: ["python3 02warp2img.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"]      
                    env:
                    - name: MYACCESSKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: accesskey
                    - name: MYSECRETKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: secretkey
                    - name: MYARGOENDPOINT
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret
                          key: minioendpoint              
                    volumeMounts:
                    - name: argo-artifacts-vol
                      mountPath: "/app/argo-artifacts/mountpath"
                    - name: tfm-secret-vol
                      mountPath: "/app/tfm-secret/mountpath"   
                - name: panorama
                  container:
                    image: geoincaks/pythonpanorama:0.1.1
                    command: [sh, -c]
                    args: ["python3 04panoimg.py $MYACCESSKEY $MYSECRETKEY  $MYARGOENDPOINT 'infolder'  'outfolder' '{{workflow.parameters.filename}}' '{{workflow.parameters.s3prefix}}'"] 
                    env:
                    - name: MYACCESSKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: accesskey
                    - name: MYSECRETKEY
                      valueFrom:
                        secretKeyRef:
                          name: argo-artifacts
                          key: secretkey      
                    - name: MYARGOENDPOINT
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret
                          key: minioendpoint 
                    - name: MYSIGNINGSECRET
                      valueFrom:
                        secretKeyRef:
                          name: tfm-secret 
                          key: signingSecret                        
                    volumeMounts:
                    - name: argo-artifacts-vol
                      mountPath: "/app/argo-artifacts/mountpath"
                    - name: tfm-secret-vol
                      mountPath: "/app/tfm-secret/mountpath"              

          parameters:
            - src:
                dependencyName: test-dep
                dataKey: body.filename
              dest: spec.arguments.parameters.0.value